Event Loop : Keeps on running as long as there are event listner registered.

npm i nodemon --save-dev //to install the npm for development purposes

Global Features vs Core Modules vs Third-Party Modules
The last lectures contained important concepts about available Node.js features and how to unlock them.

You can basically differentiate between:

Global features: Keywords like const or function but also some global objects like process

Core Node.js Modules: Examples would be the file-system module ("fs"), the path module ("path") or the Http module ("http")

Third-party Modules: Installed via npm install - you can add any kind of feature to your app via this way

Global features are always available, you don't need to import them into the files where you want to use them.

Core Node.js Modules don't need to be installed (NO npm install is required) but you need to import them when you want to use features exposed by them.

Example:

const fs = require('fs');

You can now use the fs object exported by the "fs" module.

Third-party Modules need to be installed (via npm install in the project folder) AND imported.

Example (which you don't need to understand yet - we'll cover this later in the course):

// In terminal/ command prompt
npm install --save express-session
// In code file (e.g. app.js)
const sessions = require('express-session');


Global & Local npm Packages
In the last lecture, we added nodemon as a local dependency to our project.

The good thing about local dependencies is that you can share projects without the node_modules folder (where they are stored) and you can run npm install in a project to then re-create that node_modules folder. This allows you to share only your source code, hence reducing the size of the shared project vastly.

The attached course code snippets also are shared in that way, hence you need to run npm install in the extracted packages to be able to run my code!

I showed that nodemon app.js would not work in the terminal or command line because we don't use local dependencies there but global packages.

You could install nodemon globally if you wanted (this is NOT required though - because we can just run it locally): npm install -g nodemon would do the trick. Specifically the -g flag ensures that the package gets added as a global package which you now can use anywhere on your machine, directly from inside the terminal or command prompt.

Types of errors
1.Syntax errors
2.Runtime errors
3.Logical errors

Why express. (framework) : Highly flexible not need to add more complex code. 1000s 0f 3d party modules are inbuild for using the node xepress application.
1. To make the server logic simpler.
2. Use frameworks for the Heavy lifting: framework :helper functions, tools and rules that help you to build your application

Alternatives to express.js
1.Vanilla node.js
2.Adonis.js
3.koa
4.sails.js etc..

npm i --save express //production dependencies

express.js is all about middleware: Means between the request and response we can add many middleware functions to give the response as well we can use many 3rd party packages as well.

npm i --save ejs pug express--handlebars //to install the templates